var documenterSearchIndex = {"docs":
[{"location":"API/relationships.html","page":"Relationships","title":"Relationships","text":"CurrentModule = Relationships","category":"page"},{"location":"API/relationships.html","page":"Relationships","title":"Relationships","text":"create_relationship_migration\nrelationship_name\nrelationship_field_name\nRelationship\nRelationship!\nrelated\nisrelated","category":"page"},{"location":"API/relationships.html#SearchLight.Relationships.Relationship!","page":"Relationships","title":"SearchLight.Relationships.Relationship!","text":"  Relationship!(r1::T, r2::R; context::Module)::AbstractModel where {T<:AbstractModel, R<:AbstractModel}\n\nRelationship takes two AbstractModel types and \n\nExamples\n\njulia> Base.@kwdef mutable struct Role <: AbstractModel\n         id::DbId = DbId()\n         name::String = \"\"\n       end\njulia> Role(name::Union{String,Symbol}) = Role(name = string(name))\n\n\njulia> Base.@kwdef mutable struct Permission <: AbstractModel\n         id::DbId = DbId()\n         name::String = \"\"\n       end\njulia> Permission(name::Union{String,Symbol}) = Permission(name = string(name))\n\n\njulia> Relationship!(user, role)\n\njulia> isrelated(role, permission)\n\n\n\n\n\n","category":"function"},{"location":"API/serializers/json.html","page":"JsonSerializer","title":"JsonSerializer","text":"CurrentModule = JsonSerializer","category":"page"},{"location":"API/serializers/json.html","page":"JsonSerializer","title":"JsonSerializer","text":"SearchLight.Serializer.serialize\nSearchLight.Serializer.deserialize","category":"page"},{"location":"API/filetemplates.html","page":"FileTemplates","title":"FileTemplates","text":"CurrentModule = FileTemplates","category":"page"},{"location":"API/filetemplates.html","page":"FileTemplates","title":"FileTemplates","text":"new_table_migration\nnew_relationship_table_migration\nnewmigration\nnewmodel\nnewvalidator\nadapter_default_config\nnewconfig\nnewtest","category":"page"},{"location":"API/filetemplates.html#SearchLight.Generator.FileTemplates.new_table_migration","page":"FileTemplates","title":"SearchLight.Generator.FileTemplates.new_table_migration","text":"new_database_migration(module_name::String) :: String\n\nDefault content for a new SearchLight migration.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#SearchLight.Generator.FileTemplates.new_relationship_table_migration","page":"FileTemplates","title":"SearchLight.Generator.FileTemplates.new_relationship_table_migration","text":"new_relationship_table_migration(module_name::String) :: String\n\nDefault content for a new SearchLight migration.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#SearchLight.Generator.FileTemplates.newmodel","page":"FileTemplates","title":"SearchLight.Generator.FileTemplates.newmodel","text":"newmodel(model_name::String, resource_name::String = model_name) :: String\n\nDefault content for a new SearchLight model.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#SearchLight.Generator.FileTemplates.newvalidator","page":"FileTemplates","title":"SearchLight.Generator.FileTemplates.newvalidator","text":"newvalidator(validator_name::String) :: String\n\nDefault content for a new SearchLight validator.\n\n\n\n\n\n","category":"function"},{"location":"API/filetemplates.html#SearchLight.Generator.FileTemplates.newtest","page":"FileTemplates","title":"SearchLight.Generator.FileTemplates.newtest","text":"newtest(resource_name::String) :: String\n\nDefault content for a new test file.\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html","page":"SearchLight","title":"SearchLight","text":"CurrentModule = SearchLight","category":"page"},{"location":"API/searchlight.html","page":"SearchLight","title":"SearchLight","text":"connect\ndisconnect\nconnection\nUnsupportedException\nDataFrames.DataFrame\nfind\nonereduce\nfindone\none\nrandone\nall\nfirst\nlast\nsave\nsave!\nsave!!\n_save!!\nupdatewith!\nconvertmethod\nbooltypes\nautoconvert\nupdatewith!!\nupdatewith\ncreatewith\nupdateby_or_create\nupdate_or_create\nfindone_or_create\nto_models\nto_model\nto_model!!\nto_select_part\nto_from_part\nto_where_part\nto_order_part\nto_group_part\nto_limit_part\nto_offset_part\nto_having_part\nto_join_part\ncolumns_from_joins\ncolumn_data_to_column_name\nprepare_column_name\ncolumns_names_by_table\ndataframes_by_table\nto_find_sql\nto_fetch_sql\nto_store_sql\nto_sqlinput\ndelete_all\ndeleteall\ndelete\nquery\nclone\ncolumns\nispersisted\ncolumn_field_name\npersistable_fields\nsettable_fields\ntable\npk\nprimary_key_name\nstrip_table_name\nis_fully_qualified\nfrom_fully_qualified\nstrip_module_name\nto_fully_qualified\nto_sql_column_names\nto_sql_column_name\nto_fully_qualified_sql_column_names\nfo_fully_qualified_sql_column_name\nfrom_literal_column_name\nto_dict\nto_string_dict\nenclosure\nupdate_query_part\nescape_column_name\nescape_value\nindex_name\nsql\nadd_quotes\nstrip_quotes\nisquoted\nexpand_nullable\nCore.NamedTuple","category":"page"},{"location":"API/searchlight.html#Base.one","page":"SearchLight","title":"Base.one","text":"one(x)\none(T::type)\n\nReturn a multiplicative identity for x: a value such that one(x)*x == x*one(x) == x.  Alternatively one(T) can take a type T, in which case one returns a multiplicative identity for any x of type T.\n\nIf possible, one(x) returns a value of the same type as x, and one(T) returns a value of type T.  However, this may not be the case for types representing dimensionful quantities (e.g. time in days), since the multiplicative identity must be dimensionless.  In that case, one(x) should return an identity value of the same precision (and shape, for matrices) as x.\n\nIf you want a quantity that is of the same type as x, or of type T, even if x is dimensionful, use oneunit instead.\n\nSee also the identity function, and I in LinearAlgebra for the identity matrix.\n\nExamples\n\njulia> one(3.7)\n1.0\n\njulia> one(Int)\n1\n\njulia> import Dates; one(Dates.Day(1))\n1\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#Base.all","page":"SearchLight","title":"Base.all","text":"all(itr) -> Bool\n\nTest whether all elements of a boolean collection are true, returning false as soon as the first false value in itr is encountered (short-circuiting). To short-circuit on true, use any.\n\nIf the input contains missing values, return missing if all non-missing values are true (or equivalently, if the input contains no false value), following three-valued logic.\n\nSee also: all!, any, count, &, , &&, allunique.\n\nExamples\n\njulia> a = [true,false,false,true]\n4-element Vector{Bool}:\n 1\n 0\n 0\n 1\n\njulia> all(a)\nfalse\n\njulia> all((println(i); v) for (i, v) in enumerate(a))\n1\n2\nfalse\n\njulia> all([missing, false])\nfalse\n\njulia> all([true, missing])\nmissing\n\n\n\n\n\nall(p, itr) -> Bool\n\nDetermine whether predicate p returns true for all elements of itr, returning false as soon as the first item in itr for which p returns false is encountered (short-circuiting). To short-circuit on true, use any.\n\nIf the input contains missing values, return missing if all non-missing values are true (or equivalently, if the input contains no false value), following three-valued logic.\n\nExamples\n\njulia> all(i->(4<=i<=6), [4,5,6])\ntrue\n\njulia> all(i -> (println(i); i < 3), 1:10)\n1\n2\n3\nfalse\n\njulia> all(i -> i > 0, [1, missing])\nmissing\n\njulia> all(i -> i > 0, [-1, missing])\nfalse\n\njulia> all(i -> i > 0, [1, 2])\ntrue\n\n\n\n\n\nall(A; dims)\n\nTest whether all values along the given dimensions of an array are true.\n\nExamples\n\njulia> A = [true false; true true]\n2×2 Matrix{Bool}:\n 1  0\n 1  1\n\njulia> all(A, dims=1)\n1×2 Matrix{Bool}:\n 1  0\n\njulia> all(A, dims=2)\n2×1 Matrix{Bool}:\n 0\n 1\n\n\n\n\n\nall(p, A; dims)\n\nDetermine whether predicate p returns true for all elements along the given dimensions of an array.\n\nExamples\n\njulia> A = [1 -1; 2 2]\n2×2 Matrix{Int64}:\n 1  -1\n 2   2\n\njulia> all(i -> i > 0, A, dims=1)\n1×2 Matrix{Bool}:\n 1  0\n\njulia> all(i -> i > 0, A, dims=2)\n2×1 Matrix{Bool}:\n 0\n 1\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.update_or_create","page":"SearchLight","title":"SearchLight.update_or_create","text":"update_or_create(m::T; ignore = Symbol[], skip_update = false, filters...)::T where {T<:AbstractModel}\n\nExamples\n\njulia>\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.to_models","page":"SearchLight","title":"SearchLight.to_models","text":"to_models(m::Type{T}, df::DataFrames.DataFrame)::Vector{T} where {T<:AbstractModel}\n\nReturn an array of type Model\n\nExamples\n\njulia> DataFrame(Stat, SQLWhereExpression(\"date >= ? AND date <= ?\", startdate, enddate), order=[\"stats.date\"])\n8160×9 DataFrame\n  Row │ stats_id  stats_package_uuid                 stats_package_name   stats_status  stats_region  stats_date  stats_request_count  stats_year  stats_month\n      │ Int64     String                             String               Int64         String        String      Int64                Int64       String\n──────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n    1 │        1  00000000-1111-2222-3333-44444444…  REPLTreeViews                 200  cn-northeast  2021-11-25                    1        2021  2021-11\n    2 │       17  00701ae9-d1dc-5365-b64a-a3a3ebf5…  BioAlignments                 200  au            2021-11-25                    1        2021  2021-11\n    3 │      217  00701ae9-d1dc-5365-b64a-a3a3ebf5…  BioAlignments                 200  us-west       2021-11-25                    1        2021  2021-11\n    4 │      314  009559a3-9522-5dbb-924b-0b6ed2b2…  XGBoost                       200  cn-northeast  2021-11-25                    1        2021  2021-11\n    5 │      406  009559a3-9522-5dbb-924b-0b6ed2b2…  XGBoost                       200  eu-central    2021-11-25                    5        2021  2021-11\n    6 │      461  009559a3-9522-5dbb-924b-0b6ed2b2…  XGBoost                       200  sa            2021-11-25                    1        2021  2021-11\n    ⋮\n 8160 │   623498  fff527a3-8410-504e-9ca3-60d5e79b…  SimpleANOVA                   200  eu-central    2021-11-25                    1        2021  2021-11\n\njulia> SearchLight.to_models(Stat, DataFrame(Stat, SQLWhereExpression(\"date >= ? AND date <= ?\", startdate, enddate), order=[\"stats.date\"]))\n8160-element Vector{Stat}:\n Stat\n| KEY                  | VALUE                                |\n|----------------------|--------------------------------------|\n| date::Date           | 2021-11-25                           |\n| id::DbId             | 1                                    |\n| month::String        | 2021-11                              |\n| package_name::String | REPLTreeViews                        |\n| package_uuid::String | 00000000-1111-2222-3333-444444444444 |\n| region::String       | cn-northeast                         |\n| request_count::Int64 | 1                                    |\n| status::Int64        | 200                                  |\n| year::Int64          | 2021                                 |\n ⋮\n Stat\n| KEY                  | VALUE                                |\n|----------------------|--------------------------------------|\n| date::Date           | 2021-11-25                           |\n| id::DbId             | 623498                               |\n| month::String        | 2021-11                              |\n| package_name::String | SimpleANOVA                          |\n| package_uuid::String | fff527a3-8410-504e-9ca3-60d5e79bb1e4 |\n| region::String       | eu-central                           |\n| request_count::Int64 | 1                                    |\n| status::Int64        | 200                                  |\n| year::Int64          | 2021                                 |\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.columns_from_joins","page":"SearchLight","title":"SearchLight.columns_from_joins","text":"columnsfromjoins(joins::Vector{SQLJoin})::Vector{SQLColumn}\n\nExtracts columns from joins param and adds to be used for the SELECT part\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.escape_column_name","page":"SearchLight","title":"SearchLight.escape_column_name","text":"escape_column_name(c::SQLColumn) :: SQLColumn\nescape_column_name(s::String)\n\nSanitizes input to be use as column names in SQL queries.\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.escape_value","page":"SearchLight","title":"SearchLight.escape_value","text":"escape_value(i::SQLInput)\n\nSanitizes input to be used as values in SQL queries.\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.add_quotes","page":"SearchLight","title":"SearchLight.add_quotes","text":"add_quotes(str::String) :: String\n\nAdds quotes around str and escapes any previously existing quotes.\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.strip_quotes","page":"SearchLight","title":"SearchLight.strip_quotes","text":"strip_quotes(str::String) :: String\n\nUnquotes str.\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#SearchLight.isquoted","page":"SearchLight","title":"SearchLight.isquoted","text":"isquoted(str::String) :: Bool\n\nChecks weather or not str is quoted.\n\n\n\n\n\n","category":"function"},{"location":"API/searchlight.html#Core.NamedTuple","page":"SearchLight","title":"Core.NamedTuple","text":"NamedTuple\n\nNamedTuples are, as their name suggests, named Tuples. That is, they're a tuple-like collection of values, where each entry has a unique name, represented as a Symbol. Like Tuples, NamedTuples are immutable; neither the names nor the values can be modified in place after construction.\n\nAccessing the value associated with a name in a named tuple can be done using field access syntax, e.g. x.a, or using getindex, e.g. x[:a] or x[(:a, :b)]. A tuple of the names can be obtained using keys, and a tuple of the values can be obtained using values.\n\nnote: Note\nIteration over NamedTuples produces the values without the names. (See example below.) To iterate over the name-value pairs, use the pairs function.\n\nThe @NamedTuple macro can be used for conveniently declaring NamedTuple types.\n\nExamples\n\njulia> x = (a=1, b=2)\n(a = 1, b = 2)\n\njulia> x.a\n1\n\njulia> x[:a]\n1\n\njulia> x[(:a,)]\n(a = 1,)\n\njulia> keys(x)\n(:a, :b)\n\njulia> values(x)\n(1, 2)\n\njulia> collect(x)\n2-element Vector{Int64}:\n 1\n 2\n\njulia> collect(pairs(x))\n2-element Vector{Pair{Symbol, Int64}}:\n :a => 1\n :b => 2\n\nIn a similar fashion as to how one can define keyword arguments programmatically, a named tuple can be created by giving a pair name::Symbol => value or splatting an iterator yielding such pairs after a semicolon inside a tuple literal:\n\njulia> (; :a => 1)\n(a = 1,)\n\njulia> keys = (:a, :b, :c); values = (1, 2, 3);\n\njulia> (; zip(keys, values)...)\n(a = 1, b = 2, c = 3)\n\nAs in keyword arguments, identifiers and dot expressions imply names:\n\njulia> x = 0\n0\n\njulia> t = (; x)\n(x = 0,)\n\njulia> (; t.x)\n(x = 0,)\n\ncompat: Julia 1.5\nImplicit names from identifiers and dot expressions are available as of Julia 1.5.\n\ncompat: Julia 1.7\nUse of getindex methods with multiple Symbols is available as of Julia 1.7.\n\n\n\n\n\n","category":"type"},{"location":"API/validation.html","page":"Validation","title":"Validation","text":"CurrentModule = Validation","category":"page"},{"location":"API/validation.html","page":"Validation","title":"Validation","text":"ValidationAbstractType\nValidationResult\nValidationError\nValidationRule\nModelValidator\nvalidator\nvalidate\nhaserrors\nhaserrorsfor\nerrorsfor\nerrorsmessagesfor\nerrors_to_string","category":"page"},{"location":"API/validation.html#SearchLight.Validation.ValidationRule","page":"Validation","title":"SearchLight.Validation.ValidationRule","text":"Creates Validation rule for a Model's field\n\nExamples\n\njulia> function not_empty(field::Symbol, m::T)::ValidationResult where {T<:AbstractModel}\n         isempty(getfield(m, field)) && return ValidationResult(invalid, :not_empty, \"should not be empty\")\n\n         ValidationResult(valid)\n       end\n\njulia> function is_int(field::Symbol, m::T)::ValidationResult where {T<:AbstractModel}\n         isa(getfield(m, field), Int) || return ValidationResult(invalid, :is_int, \"should be an int\")\n\n         ValidationResult(valid)\n       end\n\njulia> function is_unique(field::Symbol, m::T)::ValidationResult where {T<:AbstractModel}\n         obj = findone(typeof(m); NamedTuple(field => getfield(m, field))... )\n         if ( obj !== nothing && ! ispersisted(m) )\n           return ValidationResult(invalid, :is_unique, \"already exists\")\n         end\n\n         ValidationResult(valid)\n       end\n\njulia> ValidationRule(:username, not_empty)\njulia> ValidationRule(:username, is_unique)\njulia> ValidationRule(:age, is_int)\njulia> ValidationRule(:email, not_empty)\n\n\n\n\n\n","category":"type"},{"location":"API/validation.html#SearchLight.Validation.ModelValidator","page":"Validation","title":"SearchLight.Validation.ModelValidator","text":"The object that defines the rules and stores the validation errors associated with the fields of a model.\n\n\n\n\n\n","category":"type"},{"location":"API/validation.html#SearchLight.Validation.validate","page":"Validation","title":"SearchLight.Validation.validate","text":"validate(m::T)::Bool where {T<:AbstractModel}\n\nValidates m's data. A bool is return and existing errors are pushed to the validator's error stack.\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html","page":"Configuration","title":"Configuration","text":"CurrentModule = Configuration","category":"page"},{"location":"API/configuration.html","page":"Configuration","title":"Configuration","text":"env\nread_db_connection_data\nload\nSettings","category":"page"},{"location":"API/configuration.html#SearchLight.Configuration.env","page":"Configuration","title":"SearchLight.Configuration.env","text":"env() :: String\n\nReturns the current environment.\n\nExamples\n\njulia> Configuration.env()\n\"dev\"\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#SearchLight.Configuration.read_db_connection_data","page":"Configuration","title":"SearchLight.Configuration.read_db_connection_data","text":"read_db_connection_data(db_settings_file::String) :: Dict{Any,Any}\n\nAttempts to read the database configuration file and returns the part corresponding to the current environment as a Dict. Does not check if db_settings_file actually exists so it can throw errors. If the database connection information for the current environment does not exist, it returns an empty Dict.\n\nExamples\n\njulia> Configuration.read_db_connection_data(...)\nDict{Any,Any} with 6 entries:\n  \"host\"     => \"localhost\"\n  \"password\" => \"...\"\n  \"username\" => \"...\"\n  \"port\"     => 5432\n  \"database\" => \"...\"\n  \"adapter\"  => \"PostgreSQL\"\n\n\n\n\n\n","category":"function"},{"location":"API/configuration.html#SearchLight.Configuration.Settings","page":"Configuration","title":"SearchLight.Configuration.Settings","text":"mutable struct Settings\n\nApp configuration - sets up the app's defaults. Individual options are overwritten in the corresponding environment file.\n\n\n\n\n\n","category":"type"},{"location":"API/querybuilder.html","page":"QueryBuilder","title":"QueryBuilder","text":"CurrentModule = QueryBuilder","category":"page"},{"location":"API/querybuilder.html","page":"QueryBuilder","title":"QueryBuilder","text":"MissingModel\nQueryPart\nfrom\nselect\nwhere\nlimit\noffset\norder\ngroup\nhaving\nprepare\n+\nDataFrames.DataFrame\nSearchLight.find\nSearchLight.first\nSearchLight.last\nSearchLight.count\nSearchLight.sql","category":"page"},{"location":"API/querybuilder.html#Base.:+","page":"QueryBuilder","title":"Base.:+","text":"+(x, y...)\n\nAddition operator. x+y+z+... calls this function with all arguments, i.e. +(x, y, z, ...).\n\nExamples\n\njulia> 1 + 20 + 4\n25\n\njulia> +(1, 20, 4)\n25\n\n\n\n\n\ndt::Date + t::Time -> DateTime\n\nThe addition of a Date with a Time produces a DateTime. The hour, minute, second, and millisecond parts of the Time are used along with the year, month, and day of the Date to create the new DateTime. Non-zero microseconds or nanoseconds in the Time type will result in an InexactError being thrown.\n\n\n\n\n\n","category":"function"},{"location":"API/querybuilder.html#DataFrames.DataFrame","page":"QueryBuilder","title":"DataFrames.DataFrame","text":"DataFrame <: AbstractDataFrame\n\nAn AbstractDataFrame that stores a set of named columns.\n\nThe columns are normally AbstractVectors stored in memory, particularly a Vector, PooledVector or CategoricalVector.\n\nConstructors\n\nDataFrame(pairs::Pair...; makeunique::Bool=false, copycols::Bool=true)\nDataFrame(pairs::AbstractVector{<:Pair}; makeunique::Bool=false, copycols::Bool=true)\nDataFrame(ds::AbstractDict; copycols::Bool=true)\nDataFrame(; kwargs..., copycols::Bool=true)\n\nDataFrame(columns::AbstractVecOrMat,\n          names::AbstractVector;\n          makeunique::Bool=false, copycols::Bool=true)\n\nDataFrame(table; copycols::Union{Bool, Nothing}=nothing)\nDataFrame(::DataFrameRow)\nDataFrame(::GroupedDataFrame; keepkeys::Bool=true)\n\nKeyword arguments\n\ncopycols : whether vectors passed as columns should be copied; by default set to true and the vectors are copied; if set to false then the constructor will still copy the passed columns if it is not possible to construct a DataFrame without materializing new columns. Note the copycols=nothing default in the Tables.jl compatible constructor; it is provided as certain input table types may have already made a copy of columns or the columns may otherwise be immutable, in which case columns are not copied by default. To force a copy in such cases, or to get mutable columns from an immutable input table (like Arrow.Table), pass copycols=true explicitly.\nmakeunique : if false (the default), an error will be raised\n\n(note that not all constructors support these keyword arguments)\n\nDetails on behavior of different constructors\n\nIt is allowed to pass a vector of Pairs, a list of Pairs as positional arguments, or a list of keyword arguments. In this case each pair is considered to represent a column name to column value mapping and column name must be a Symbol or string. Alternatively a dictionary can be passed to the constructor in which case its entries are considered to define the column name and column value pairs. If the dictionary is a Dict then column names will be sorted in the returned DataFrame.\n\nIn all the constructors described above column value can be a vector which is consumed as is or an object of any other type (except AbstractArray). In the latter case the passed value is automatically repeated to fill a new vector of the appropriate length. As a particular rule values stored in a Ref or a 0-dimensional AbstractArray are unwrapped and treated in the same way.\n\nIt is also allowed to pass a vector of vectors or a matrix as as the first argument. In this case the second argument must be a vector of Symbols or strings specifying column names, or the symbol :auto to generate column names x1, x2, ... automatically. Note that in this case if the first argument is a matrix and copycols=false the columns of the created DataFrame will be views of columns the source matrix.\n\nIf a single positional argument is passed to a DataFrame constructor then it is assumed to be of type that implements the Tables.jl interface using which the returned DataFrame is materialized.\n\nFinally it is allowed to construct a DataFrame from a DataFrameRow or a GroupedDataFrame. In the latter case the keepkeys keyword argument specifies whether the resulting DataFrame should contain the grouping columns of the passed GroupedDataFrame and the order of rows in the result follows the order of groups in the GroupedDataFrame passed.\n\nNotes\n\nThe DataFrame constructor by default copies all columns vectors passed to it. Pass the copycols=false keyword argument (where supported) to reuse vectors without copying them.\n\nBy default an error will be raised if duplicates in column names are found. Pass makeunique=true keyword argument (where supported) to accept duplicate names, in which case they will be suffixed with _i (i starting at 1 for the first duplicate).\n\nIf an AbstractRange is passed to a DataFrame constructor as a column it is always collected to a Vector (even if copycols=false). As a general rule AbstractRange values are always materialized to a Vector by all functions in DataFrames.jl before being stored in a DataFrame.\n\nDataFrame can store only columns that use 1-based indexing. Attempting to store a vector using non-standard indexing raises an error.\n\nThe DataFrame type is designed to allow column types to vary and to be dynamically changed also after it is constructed. Therefore DataFrames are not type stable. For performance-critical code that requires type-stability either use the functionality provided by select/transform/combine functions, use Tables.columntable and Tables.namedtupleiterator functions, use barrier functions, or provide type assertions to the variables that hold columns extracted from a DataFrame.\n\nMetadata: this function preserves all table and column-level metadata. As a special case if a GroupedDataFrame is passed then only :note-style metadata from parent of the GroupedDataFrame is preserved.\n\nExamples\n\njulia> DataFrame((a=[1, 2], b=[3, 4])) # Tables.jl table constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      3\n   2 │     2      4\n\njulia> DataFrame([(a=1, b=0), (a=2, b=0)]) # Tables.jl table constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia> DataFrame(\"a\" => 1:2, \"b\" => 0) # Pair constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia> DataFrame([:a => 1:2, :b => 0]) # vector of Pairs constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia> DataFrame(Dict(:a => 1:2, :b => 0)) # dictionary constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia> DataFrame(a=1:2, b=0) # keyword argument constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia> DataFrame([[1, 2], [0, 0]], [:a, :b]) # vector of vectors constructor\n2×2 DataFrame\n Row │ a      b\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\njulia> DataFrame([1 0; 2 0], :auto) # matrix constructor\n2×2 DataFrame\n Row │ x1     x2\n     │ Int64  Int64\n─────┼──────────────\n   1 │     1      0\n   2 │     2      0\n\n\n\n\n\n","category":"type"},{"location":"API/querybuilder.html#SearchLight.find","page":"QueryBuilder","title":"SearchLight.find","text":"find(m::Type{T}, q::SQLQuery, j::Union{Nothing,Vector{SQLJoin}} = nothing)::Vector{T} where {T<:AbstractModel}\n\nExamples\n\n\n\n\n\n\n\nfind(m::Type{T}, w::SQLWhereEntity; order = SQLOrder(pk(m)))::Vector{T} where {T<:AbstractModel}\n\nReturn a vector of AbstractModel given Model instance where query and order by\n\nExamples\n\njulia> using Dates, Stats\n\njulia> startdate = Dates.Date(\"2021-11-25\")\n2021-11-25\n\njulia> enddate = Dates.Date(\"2021-11-25\")\n2021-11-25\n\njulia> find(Stat, SQLWhereExpression(\"date >= ? AND date <= ?\", startdate, enddate), order=[\"stats.date\"])\n8160-element Vector{Stat}:\n Stat\n| KEY                  | VALUE                                |\n|----------------------|--------------------------------------|\n| date::Date           | 2021-11-25                           |\n| id::DbId             | 1                                    |\n| month::String        | 2021-11                              |\n| package_name::String | REPLTreeViews                        |\n| package_uuid::String | 00000000-1111-2222-3333-444444444444 |\n| region::String       | cn-northeast                         |\n| request_count::Int64 | 1                                    |\n| status::Int64        | 200                                  |\n| year::Int64          | 2021                                 |\n\n  ⋮\nStat\n| KEY                  | VALUE                                |\n|----------------------|--------------------------------------|\n| date::Date           | 2021-11-25                           |\n| id::DbId             | 623498                               |\n| month::String        | 2021-11                              |\n| package_name::String | SimpleANOVA                          |\n| package_uuid::String | fff527a3-8410-504e-9ca3-60d5e79bb1e4 |\n| region::String       | eu-central                           |\n| request_count::Int64 | 1                                    |\n| status::Int64        | 200                                  |\n| year::Int64          | 2021                                 |\n\n\n\n\n\n","category":"function"},{"location":"API/querybuilder.html#Base.first","page":"QueryBuilder","title":"Base.first","text":"first(coll)\n\nGet the first element of an iterable collection. Return the start point of an AbstractRange even if it is empty.\n\nSee also: only, firstindex, last.\n\nExamples\n\njulia> first(2:2:10)\n2\n\njulia> first([1; 2; 3; 4])\n1\n\n\n\n\n\nfirst(itr, n::Integer)\n\nGet the first n elements of the iterable collection itr, or fewer elements if itr is not long enough.\n\nSee also: startswith, Iterators.take.\n\ncompat: Julia 1.6\nThis method requires at least Julia 1.6.\n\nExamples\n\njulia> first([\"foo\", \"bar\", \"qux\"], 2)\n2-element Vector{String}:\n \"foo\"\n \"bar\"\n\njulia> first(1:6, 10)\n1:6\n\njulia> first(Bool[], 1)\nBool[]\n\n\n\n\n\nfirst(s::AbstractString, n::Integer)\n\nGet a string consisting of the first n characters of s.\n\nExamples\n\njulia> first(\"∀ϵ≠0: ϵ²>0\", 0)\n\"\"\n\njulia> first(\"∀ϵ≠0: ϵ²>0\", 1)\n\"∀\"\n\njulia> first(\"∀ϵ≠0: ϵ²>0\", 3)\n\"∀ϵ≠\"\n\n\n\n\n\nfirst(q::Deque)\n\nReturns the first element of the deque q.\n\n\n\n\n\nfirst(D::CircularDeque)\n\nGet the item at the front of the queue.\n\n\n\n\n\nfirst(s::Stack)\n\nGet the top item from the stack. Sometimes called peek.\n\n\n\n\n\nfirst(h::BinaryHeap)\n\nReturns the element at the top of the heap h.\n\n\n\n\n\nfirst(h::BinaryMinMaxHeap)\n\nGet the first (minimum) of the heap.\n\n\n\n\n\nfirst(sc)\n\nArgument sc is a SortedDict, SortedMultiDict or SortedSet. This function returns the first item (a k=>v pair for SortedDict and SortedMultiDict or a key for SortedSet) according to the sorted order in the container. Thus, first(sc) is equivalent to deref((sc,startof(sc))). It is an error to call this function on an empty container. Time: O(log n)\n\n\n\n\n\nfirst(sc)\n\nArgument sc is a SortedDict, SortedMultiDict or SortedSet. This function returns the first item (a k=>v pair for SortedDict and SortedMultiDict or a key for SortedSet) according to the sorted order in the container. Thus, first(sc) is equivalent to deref((sc,startof(sc))). It is an error to call this function on an empty container. Time: O(log n)\n\n\n\n\n\nfirst(sc)\n\nArgument sc is a SortedDict, SortedMultiDict or SortedSet. This function returns the first item (a k=>v pair for SortedDict and SortedMultiDict or a key for SortedSet) according to the sorted order in the container. Thus, first(sc) is equivalent to deref((sc,startof(sc))). It is an error to call this function on an empty container. Time: O(log n)\n\n\n\n\n\nfirst(cb::CircularBuffer)\n\nGet the first element of CircularBuffer.\n\n\n\n\n\nfirst(df::AbstractDataFrame)\n\nGet the first row of df as a DataFrameRow.\n\nMetadata: this function preserves table-level and column-level :note-style metadata.\n\n\n\n\n\nfirst(df::AbstractDataFrame, n::Integer; view::Bool=false)\n\nGet a data frame with the n first rows of df.\n\nIf view=false a freshly allocated DataFrame is returned. If view=true then a SubDataFrame view into df is returned.\n\nMetadata: this function preserves table-level and column-level :note-style metadata.\n\n\n\n\n\nfirst(interval::AbstractInterval{T}) -> Union{T,Nothing}\n\nThe value of the lower endpoint. When the lower endpoint is unbounded nothing will be returned.\n\n\n\n\n\n","category":"function"},{"location":"API/querybuilder.html#Base.last","page":"QueryBuilder","title":"Base.last","text":"last(coll)\n\nGet the last element of an ordered collection, if it can be computed in O(1) time. This is accomplished by calling lastindex to get the last index. Return the end point of an AbstractRange even if it is empty.\n\nSee also first, endswith.\n\nExamples\n\njulia> last(1:2:10)\n9\n\njulia> last([1; 2; 3; 4])\n4\n\n\n\n\n\nlast(itr, n::Integer)\n\nGet the last n elements of the iterable collection itr, or fewer elements if itr is not long enough.\n\ncompat: Julia 1.6\nThis method requires at least Julia 1.6.\n\nExamples\n\njulia> last([\"foo\", \"bar\", \"qux\"], 2)\n2-element Vector{String}:\n \"bar\"\n \"qux\"\n\njulia> last(1:6, 10)\n1:6\n\njulia> last(Float64[], 1)\nFloat64[]\n\n\n\n\n\nlast(s::AbstractString, n::Integer)\n\nGet a string consisting of the last n characters of s.\n\nExamples\n\njulia> last(\"∀ϵ≠0: ϵ²>0\", 0)\n\"\"\n\njulia> last(\"∀ϵ≠0: ϵ²>0\", 1)\n\"0\"\n\njulia> last(\"∀ϵ≠0: ϵ²>0\", 3)\n\"²>0\"\n\n\n\n\n\nlast(q::Deque)\n\nReturns the last element of the deque q.\n\n\n\n\n\nlast(D::CircularDeque)\n\nGet the item from the back of the queue.\n\n\n\n\n\nlast(sc)\n\nArgument sc is a SortedDict, SortedMultiDict or SortedSet. This function returns the last item (a k=>v pair for SortedDict and SortedMultiDict or a key for SortedSet) according to the sorted order in the container. Thus, last(sc) is equivalent to deref((sc,lastindex(sc))). It is an error to call this function on an empty container. Time: O(log n)\n\n\n\n\n\nlast(sc)\n\nArgument sc is a SortedDict, SortedMultiDict or SortedSet. This function returns the last item (a k=>v pair for SortedDict and SortedMultiDict or a key for SortedSet) according to the sorted order in the container. Thus, last(sc) is equivalent to deref((sc,lastindex(sc))). It is an error to call this function on an empty container. Time: O(log n)\n\n\n\n\n\nlast(sc)\n\nArgument sc is a SortedDict, SortedMultiDict or SortedSet. This function returns the last item (a k=>v pair for SortedDict and SortedMultiDict or a key for SortedSet) according to the sorted order in the container. Thus, last(sc) is equivalent to deref((sc,lastindex(sc))). It is an error to call this function on an empty container. Time: O(log n)\n\n\n\n\n\nlast(cb::CircularBuffer)\n\nGet the last element of CircularBuffer.\n\n\n\n\n\nlast(df::AbstractDataFrame)\n\nGet the last row of df as a DataFrameRow.\n\nMetadata: this function preserves table-level and column-level :note-style metadata.\n\n\n\n\n\nlast(df::AbstractDataFrame, n::Integer; view::Bool=false)\n\nGet a data frame with the n last rows of df.\n\nIf view=false a freshly allocated DataFrame is returned. If view=true then a SubDataFrame view into df is returned.\n\nMetadata: this function preserves table-level and column-level :note-style metadata.\n\n\n\n\n\nlast(interval::AbstractInterval{T}) -> Union{T,Nothing}\n\nThe value of the upper endpoint. When the upper endpoint is unbounded nothing will be returned.\n\n\n\n\n\n","category":"function"},{"location":"API/querybuilder.html#SearchLight.sql","page":"QueryBuilder","title":"SearchLight.sql","text":"\n\n\n\n","category":"function"},{"location":"API/callbacks.html","page":"Callbacks","title":"Callbacks","text":"CurrentModule = Callbacks","category":"page"},{"location":"API/callbacks.html","page":"Callbacks","title":"Callbacks","text":"on_exception\non_find\nafter_find\non_save\nbefore_save\nafter_save","category":"page"},{"location":"API/exceptions.html","page":"Exceptions","title":"Exceptions","text":"CurrentModule = Exceptions","category":"page"},{"location":"API/exceptions.html","page":"Exceptions","title":"Exceptions","text":"SearchLightException\nNotPersistedException\nMissingDatabaseConfigurationException\nNotConnectedException\nUnretrievedModelException\nInvalidModelException\nTypeConversionException\nMissingConversionMethodException","category":"page"},{"location":"API/serializer.html","page":"Serializer","title":"Serializer","text":"CurrentModule = Serializer","category":"page"},{"location":"API/serializer.html","page":"Serializer","title":"Serializer","text":"serialize\ndeserialize\nserializables","category":"page"},{"location":"API/modeltypes.html","page":"ModelTypes","title":"ModelTypes","text":"CurrentModule = SearchLight","category":"page"},{"location":"API/modeltypes.html","page":"ModelTypes","title":"ModelTypes","text":"DbId\nSQLType\nAbstractModel\nSQLInput\nSQLColumn\nSQLColumns\nSQLLogicOperator\nSQLWhere\nSQLWhereExpression\nSQLWhereEntity\nSQLLimit\nSQLOrder\nSQLQuery\nSQLRaw\nSQLJoin\nSQLOn\nSQLJoinType\nSQLHaving\n@sql_str","category":"page"},{"location":"API/modeltypes.html#SearchLight.SQLInput","page":"ModelTypes","title":"SearchLight.SQLInput","text":"Provides safe input into SQL queries and operations related to that.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLColumn","page":"ModelTypes","title":"SearchLight.SQLColumn","text":"Represents a SQL column when building SQL queries.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLLogicOperator","page":"ModelTypes","title":"SearchLight.SQLLogicOperator","text":"Represents the logic operators (OR, AND) as part of SQL queries.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLWhere","page":"ModelTypes","title":"SearchLight.SQLWhere","text":"Provides functionality for building and manipulating SQL WHERE conditions.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLWhereExpression","page":"ModelTypes","title":"SearchLight.SQLWhereExpression","text":"SQLWhereExpression(sql_expression::String, values::T)\nSQLWhereExpression(sql_expression::String[, values::Vector{T}])\n\nConstructs an instance of SQLWhereExpression, replacing the ? placeholders inside sql_expression with properly quoted values.\n\nExamples:\n\njulia> SQLWhereExpression(\"slug LIKE ?\", \"%julia%\")\n\nSearchLight.SQLWhereExpression\n+================+=============+\n|            key |       value |\n+================+=============+\n|      condition |         AND |\n+----------------+-------------+\n| sql_expression | slug LIKE ? |\n+----------------+-------------+\n|         values |   '%julia%' |\n+----------------+-------------+\n\njulia> SQLWhereExpression(\"id BETWEEN ? AND ?\", [10, 20])\n\nSearchLight.SQLWhereExpression\n+================+====================+\n|            key |              value |\n+================+====================+\n|      condition |                AND |\n+----------------+--------------------+\n| sql_expression | id BETWEEN ? AND ? |\n+----------------+--------------------+\n|         values |              10,20 |\n+----------------+--------------------+\n\njulia> SQLWhereExpression(\"question LIKE 'what is the question\\?'\")\n\nSearchLight.SQLWhereExpression\n+================+========================================+\n|            key |                                  value |\n+================+========================================+\n|      condition |                                    AND |\n+----------------+----------------------------------------+\n| sql_expression | question LIKE 'what is the question?'  |\n+----------------+----------------------------------------+\n|         values |                                        |\n+----------------+----------------------------------------+\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLLimit","page":"ModelTypes","title":"SearchLight.SQLLimit","text":"Wrapper around SQL limit operator.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLOrder","page":"ModelTypes","title":"SearchLight.SQLOrder","text":"Wrapper around SQL order operator.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLQuery","page":"ModelTypes","title":"SearchLight.SQLQuery","text":"SQLQuery( columns = SQLColumn[],\n          where   = SQLWhereEntity[],\n          limit   = SQLLimit(\"ALL\"),\n          offset  = 0,\n          order   = SQLOrder[],\n          group   = SQLColumn[],\n          having  = SQLWhereEntity[])\n\nReturns a new instance of SQLQuery.\n\nExamples\n\njulia> SQLQuery(where = [SQLWhereExpression(\"id BETWEEN ? AND ?\", [10, 20])], offset = 5, limit = 5, order = :title)\n\nSearchLight.SQLQuery\n+=========+==============================================================+\n|     key |                                                        value |\n+=========+==============================================================+\n| columns |                                                              |\n+---------+--------------------------------------------------------------+\n|   group |                                                              |\n+---------+--------------------------------------------------------------+\n|  having | Union{SearchLight.SQLWhere,SearchLight.SQLWhereExpression}[] |\n+---------+--------------------------------------------------------------+\n|   limit |                                                            5 |\n+---------+--------------------------------------------------------------+\n|  offset |                                                            5 |\n+---------+--------------------------------------------------------------+\n|         |                                        SearchLight.SQLOrder[ |\n|         |                                         SearchLight.SQLOrder |\n|         |                                      +===========+=========+ |\n|         |                                      |       key |   value | |\n|   order |                                                 +========... |\n+---------+--------------------------------------------------------------+\n|         |  Union{SearchLight.SQLWhere,SearchLight.SQLWhereExpression}[ |\n|         |                               SearchLight.SQLWhereExpression |\n|   where |                                                 +========... |\n+---------+--------------------------------------------------------------+\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLRaw","page":"ModelTypes","title":"SearchLight.SQLRaw","text":"Wrapper around a raw SQL query part.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLJoin","page":"ModelTypes","title":"SearchLight.SQLJoin","text":"Builds and manipulates SQL join expressions.\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLOn","page":"ModelTypes","title":"SearchLight.SQLOn","text":"Represents the ON operator used in SQL JOIN\n\n\n\n\n\n","category":"type"},{"location":"API/modeltypes.html#SearchLight.SQLJoinType","page":"ModelTypes","title":"SearchLight.SQLJoinType","text":"Wrapper around the various types of SQL join (left, right, inner, etc).\n\n\n\n\n\n","category":"type"},{"location":"API/migrations.html","page":"Migrations","title":"Migrations","text":"CurrentModule = Migration","category":"page"},{"location":"API/migrations.html","page":"Migrations","title":"Migrations","text":"DatabaseMigration\nIrreversibleMigrationException\nExistingMigrationException\nMigrationNotFoundException\nnew_table\nnewtable\nrelationship_table_name\nnew\nmigration_hash\nmigration_file_name\nmigration_module_name\nlast_up\nlastup\nlast_down\nlastdown\nup\nup_by_module_name\ndown\ndown_by_module_name\nmigration_by_module_name\nall_migrations\nall\nlast_migration\nlast\nrun_migration\nstore_migration_status\nupped_migrations\ndowned_migrations\nstatus\nall_with_status\nall_down!!\nall_up!!\ncreate_table\ncolumn\ncolumns\ncolumn_id\nadd_index\nadd_indexes\nadd_column\nadd_columns\ndrop_table\nremove_column\nremove_columns\nremove_index\nremove_indexes\nremove_indices\ncreate_sequence\nconstraint\nnextval\ncolumn_id_sequence\nremove_sequence\ndrop_sequence\ncreate_migrations_table\ninit","category":"page"},{"location":"API/migrations.html#SearchLight.Migration.new_table","page":"Migrations","title":"SearchLight.Migration.new_table","text":"newtable(migration_name::String, resource::String) :: String\n\nCreates a new default migration file and persists it to disk in the configured migrations folder.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.newtable","page":"Migrations","title":"SearchLight.Migration.newtable","text":"newtable(migration_name::String, resource::String) :: String\n\nCreates a new default migration file and persists it to disk in the configured migrations folder.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#new","page":"Migrations","title":"new","text":"new\n\nSpecial function available to inner constructors which created a new object of the type. See the manual section on Inner Constructor Methods for more information.\n\n\n\n\n\n","category":"keyword"},{"location":"API/migrations.html#SearchLight.Migration.migration_hash","page":"Migrations","title":"SearchLight.Migration.migration_hash","text":"migration_hash() :: String\n\nComputes a unique hash for a migration identifier.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.migration_file_name","page":"Migrations","title":"SearchLight.Migration.migration_file_name","text":"migration_file_name(migration_name::String) :: String\nmigration_file_name(cmd_args::Dict{String,Any}, config::Configuration.Settings) :: String\n\nComputes the name of a new migration file.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.migration_module_name","page":"Migrations","title":"SearchLight.Migration.migration_module_name","text":"migration_module_name(underscored_migration_name::String) :: String\n\nComputes the name of the module of the migration based on the input from the user (migration name).\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.last_up","page":"Migrations","title":"SearchLight.Migration.last_up","text":"last_up(; force = false) :: Nothing\n\nMigrates up the last migration. If force is true, the migration will be executed even if it's already up.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.lastup","page":"Migrations","title":"SearchLight.Migration.lastup","text":"last_up(; force = false) :: Nothing\n\nMigrates up the last migration. If force is true, the migration will be executed even if it's already up.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.last_down","page":"Migrations","title":"SearchLight.Migration.last_down","text":"last_down() :: Nothing\n\nMigrates down the last migration. If force is true, the migration will be executed even if it's already down.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.lastdown","page":"Migrations","title":"SearchLight.Migration.lastdown","text":"last_down() :: Nothing\n\nMigrates down the last migration. If force is true, the migration will be executed even if it's already down.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.up","page":"Migrations","title":"SearchLight.Migration.up","text":"up(migration_module_name::String; force::Bool = false) :: Nothing\nup_by_module_name(migration_module_name::String; force::Bool = false) :: Nothing\n\nRuns up the migration corresponding to migration_module_name.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.down","page":"Migrations","title":"SearchLight.Migration.down","text":"down(migration_module_name::String; force::Bool = false) :: Nothing\ndown_by_module_name(migration_module_name::String; force::Bool = false) :: Nothing\n\nRuns down the migration corresponding to migration_module_name.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.migration_by_module_name","page":"Migrations","title":"SearchLight.Migration.migration_by_module_name","text":"migration_by_module_name(migration_module_name::String) :: Union{Nothing,DatabaseMigration}\n\nComputes the migration that corresponds to migration_module_name.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.all_migrations","page":"Migrations","title":"SearchLight.Migration.all_migrations","text":"all_migrations() :: Tuple{Vector{String},Dict{String,DatabaseMigration}}\n\nReturns the list of all the migrations.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.all","page":"Migrations","title":"SearchLight.Migration.all","text":"all_migrations() :: Tuple{Vector{String},Dict{String,DatabaseMigration}}\n\nReturns the list of all the migrations.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.last_migration","page":"Migrations","title":"SearchLight.Migration.last_migration","text":"last_migration() :: DatabaseMigration\n\nReturns the last created migration.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.last","page":"Migrations","title":"SearchLight.Migration.last","text":"last_migration() :: DatabaseMigration\n\nReturns the last created migration.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.run_migration","page":"Migrations","title":"SearchLight.Migration.run_migration","text":"run_migration(migration::DatabaseMigration, direction::Symbol; force = false) :: Nothing\n\nRuns migration in up or down, per directon. If force is true, the migration is run regardless of its current status (already up or down).\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.store_migration_status","page":"Migrations","title":"SearchLight.Migration.store_migration_status","text":"store_migration_status(migration::DatabaseMigration, direction::Symbol) :: Nothing\n\nPersists the direction of the migration into the database.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.upped_migrations","page":"Migrations","title":"SearchLight.Migration.upped_migrations","text":"upped_migrations() :: Vector{String}\n\nList of all migrations that are up.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.downed_migrations","page":"Migrations","title":"SearchLight.Migration.downed_migrations","text":"downed_migrations() :: Vector{String}\n\nList of all migrations that are down.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.status","page":"Migrations","title":"SearchLight.Migration.status","text":"status() :: Nothing\n\nPrints a table that displays the direction of each migration.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.all_with_status","page":"Migrations","title":"SearchLight.Migration.all_with_status","text":"all_with_status() :: Tuple{Vector{String},Dict{String,Dict{Symbol,Any}}}\n\nReturns a list of all the migrations and their status.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.all_down!!","page":"Migrations","title":"SearchLight.Migration.all_down!!","text":"all_down!!() :: Nothing\n\nRuns all migrations down.\n\n\n\n\n\n","category":"function"},{"location":"API/migrations.html#SearchLight.Migration.all_up!!","page":"Migrations","title":"SearchLight.Migration.all_up!!","text":"all_up!!() :: Nothing\n\nRuns all migrations up.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html","page":"Generator","title":"Generator","text":"CurrentModule = Generator","category":"page"},{"location":"API/generator.html","page":"Generator","title":"Generator","text":"newmodel\nnewresource\nnew_table_migration\nnewmigration\nsetup_resource_path\nwrite_resource_file\nnewconfig\nresource_does_not_exist\nmodel_file_name\nvalidator_file_name","category":"page"},{"location":"API/generator.html#SearchLight.Generator.newmodel","page":"Generator","title":"SearchLight.Generator.newmodel","text":"newmodel(name::Union{String,Symbol}; path::Union{String,Nothing} = nothing, pluralize::Bool = true) :: Nothing\n\nGenerates a new SearchLight model file and persists it to the resources folder.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.newresource","page":"Generator","title":"SearchLight.Generator.newresource","text":"newresource(resource_name::Union{String,Symbol}) :: Nothing\n\nGenerates all the files associated with a new resource and persists them to the resources folder.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.new_table_migration","page":"Generator","title":"SearchLight.Generator.new_table_migration","text":"new_table_migration(migration_name::Union{String,Symbol}; pluralize::Bool = true) :: Nothing\n\nCretes the migration script for a new table.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.newmigration","page":"Generator","title":"SearchLight.Generator.newmigration","text":"newmigration(migration_name::Union{String,Symbol}) :: Nothing\n\nCreates a new migration script.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.setup_resource_path","page":"Generator","title":"SearchLight.Generator.setup_resource_path","text":"setup_resource_path(resource_name::String) :: String\n\nComputes and creates the directories structure needed to persist a new resource.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.write_resource_file","page":"Generator","title":"SearchLight.Generator.write_resource_file","text":"write_resource_file(resource_path::String, file_name::String, resource_name::String) :: Bool\n\nGenerates all resouce files and persists them to disk.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.newconfig","page":"Generator","title":"SearchLight.Generator.newconfig","text":"newconfig(path::String = SearchLight.DB_PATH; filename = SearchLight.SEARCHLIGHT_DB_CONFIG_FILE_NAME) :: Nothing\n\nCreates a new configuration file.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.resource_does_not_exist","page":"Generator","title":"SearchLight.Generator.resource_does_not_exist","text":"resource_does_not_exist(resource_path::String, file_name::String) :: Bool\n\nChecks if a given resource does not exist at resource_path.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.model_file_name","page":"Generator","title":"SearchLight.Generator.model_file_name","text":"model_file_name(resource_name::Union{String,Symbol}) :: String\n\nGenerates the file name for the model corresponding to resource_name.\n\n\n\n\n\n","category":"function"},{"location":"API/generator.html#SearchLight.Generator.validator_file_name","page":"Generator","title":"SearchLight.Generator.validator_file_name","text":"validator_file_name(resource_name::Union{String,Symbol}) :: String\n\nGenerates the file name for the validator corresponding to resource_name.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: SearchLight Logo)","category":"page"},{"location":"index.html#SearchLight-Concise,-secure,-cross-platform-query-builder-and-ORM-for-Julia","page":"Home","title":"SearchLight - Concise, secure, cross-platform query builder and ORM for Julia","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SearchLight supports SQLite, MySQL/MariaDB and Postgres, offering powerful features like data modelling, query generation, validation, database schema migrations, relationships, data serialisation, and more.","category":"page"},{"location":"API/transactions.html","page":"Transactions","title":"Transactions","text":"CurrentModule = Transactions","category":"page"},{"location":"API/transactions.html","page":"Transactions","title":"Transactions","text":"begin_transaction\ncommit_transaction\nrollback_transaction\ntransaction\nwith_transaction","category":"page"}]
}
